<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classBasePlasticity" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BasePlasticity</compoundname>
    <derivedcompoundref refid="classBCM" prot="public" virt="non-virtual">BCM</derivedcompoundref>
    <derivedcompoundref refid="classHopfield" prot="public" virt="non-virtual">Hopfield</derivedcompoundref>
    <includes refid="base_8h" local="no">base.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBasePlasticity_1a5c440b00a49873031e5d0510f377f791" prot="protected" static="no" mutable="no">
        <type><ref refid="classupdate__args" kindref="compound">update_args</ref></type>
        <definition>update_args BasePlasticity::optimizer</definition>
        <argsstring></argsstring>
        <name>optimizer</name>
        <briefdescription>
<para>optimizer object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="42" column="15" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a427d9ff731f3db65bf5474e078b36467" prot="protected" static="no" mutable="no">
        <type>std ::unique_ptr&lt; float[] &gt;</type>
        <definition>std :: unique_ptr&lt; float[] &gt; BasePlasticity::output</definition>
        <argsstring></argsstring>
        <name>output</name>
        <briefdescription>
<para>array of outputs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="44" column="22" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1ac85dc18520a49febfcffd6646b0ab9b6" prot="protected" static="no" mutable="no">
        <type>std ::unique_ptr&lt; float[] &gt;</type>
        <definition>std :: unique_ptr&lt; float[] &gt; BasePlasticity::weights</definition>
        <argsstring></argsstring>
        <name>weights</name>
        <briefdescription>
<para>array-matrix of weights </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="50" column="22" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1aa892a754bac8c9e6ab0268be5b070f4b" prot="protected" static="no" mutable="no">
        <type>std ::deque&lt; std ::unique_ptr&lt; float[] &gt; &gt;</type>
        <definition>std :: deque&lt; std :: unique_ptr &lt; float[] &gt; &gt; BasePlasticity::history</definition>
        <argsstring></argsstring>
        <name>history</name>
        <briefdescription>
<para>deque for the convergency monitoring </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="56" column="17" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a1b218e7e7c6f5494aee2a8f8e603cbec" prot="protected" static="no" mutable="no">
        <type>std ::unique_ptr&lt; float[] &gt;</type>
        <definition>std :: unique_ptr&lt; float[] &gt; BasePlasticity::theta</definition>
        <argsstring></argsstring>
        <name>theta</name>
        <briefdescription>
<para>array of means </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="57" column="22" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a6e55f0f7d052edaf0887db9ea54e550e" prot="protected" static="no" mutable="no">
        <type>std ::function&lt; float(const float &amp;) &gt;</type>
        <definition>std :: function&lt; float(const float &amp;) &gt; BasePlasticity::activation</definition>
        <argsstring></argsstring>
        <name>activation</name>
        <briefdescription>
<para>pointer to activation function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="59" column="20" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1adf83370e29d977f79690bf17ed3668bf" prot="protected" static="no" mutable="no">
        <type>std ::function&lt; float(const float &amp;) &gt;</type>
        <definition>std :: function&lt; float(const float &amp;) &gt; BasePlasticity::gradient</definition>
        <argsstring></argsstring>
        <name>gradient</name>
        <briefdescription>
<para>pointer to gradient function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="60" column="20" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a4a6ecb6e802bdfc043346c41b2682ca1" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int BasePlasticity::batch</definition>
        <argsstring></argsstring>
        <name>batch</name>
        <briefdescription>
<para>batch size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="70" column="7" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a6128541398550402261cf3eb1d6d1822" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int BasePlasticity::outputs</definition>
        <argsstring></argsstring>
        <name>outputs</name>
        <briefdescription>
<para>number of hidden units </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="71" column="7" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a6a98b64e6ab4ff78982b15e8f74ecb2f" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int BasePlasticity::nweights</definition>
        <argsstring></argsstring>
        <name>nweights</name>
        <briefdescription>
<para>number of weights </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="72" column="7" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a510a58d019657002b7b292072cd4a9e9" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int BasePlasticity::epochs_for_convergency</definition>
        <argsstring></argsstring>
        <name>epochs_for_convergency</name>
        <briefdescription>
<para>number of stable epochs requested for the convergency </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="73" column="7" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a974bdeec773185818312b6c82f7a764b" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BasePlasticity::mu</definition>
        <argsstring></argsstring>
        <name>mu</name>
        <briefdescription>
<para>Mean of the gaussian distribution that initializes the weights. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="75" column="9" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a45ee1f1803e06f09d9044e9252852631" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BasePlasticity::sigma</definition>
        <argsstring></argsstring>
        <name>sigma</name>
        <briefdescription>
<para>Standard deviation of the gaussian distribution that initializes the weights. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="76" column="9" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBasePlasticity_1a2940d7e49ae8f8725ac552bfb0666e93" prot="protected" static="no" mutable="no">
        <type>float</type>
        <definition>float BasePlasticity::convergency_atol</definition>
        <argsstring></argsstring>
        <name>convergency_atol</name>
        <briefdescription>
<para>Absolute tolerance requested for the convergency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="77" column="9" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classBasePlasticity_1a9bc89cbc53982004dddd6c05a6f8c78b" prot="public" static="yes" mutable="no">
        <type>std ::mt19937</type>
        <definition>std :: mt19937 BasePlasticity::engine</definition>
        <argsstring></argsstring>
        <name>engine</name>
        <briefdescription>
<para>Random number generator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="64" column="25" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classBasePlasticity_1ac3b0a942271707d1ac30cfb495fa91b6" prot="protected" static="yes" mutable="no">
        <type>float</type>
        <definition>float BasePlasticity::precision</definition>
        <argsstring></argsstring>
        <name>precision</name>
        <briefdescription>
<para>Parameter that controls numerical precision of the weight updates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="68" column="16" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBasePlasticity_1ab930aa85f4b5c42f2db8b18a1cba3a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BasePlasticity::BasePlasticity</definition>
        <argsstring>()</argsstring>
        <name>BasePlasticity</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="88" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1ad24090d74bf2a00d7b94f17ad5a643f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BasePlasticity::BasePlasticity</definition>
        <argsstring>(const int &amp;outputs, const int &amp;batch_size, int activation=transfer ::_linear_, update_args optimizer=update_args(optimizer_t ::_sgd), float mu=0.f, float sigma=1.f, int epochs_for_convergency=1, float convergency_atol=1e-2f, int seed=42)</argsstring>
        <name>BasePlasticity</name>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>activation</declname>
          <defval>transfer ::_linear_</defval>
        </param>
        <param>
          <type><ref refid="classupdate__args" kindref="compound">update_args</ref></type>
          <declname>optimizer</declname>
          <defval><ref refid="classupdate__args" kindref="compound">update_args</ref>(<ref refid="optimizer_8h_1a75322c2c76bf9aff92b61f429863e461" kindref="member">optimizer_t</ref> ::<ref refid="optimizer_8h_1a75322c2c76bf9aff92b61f429863e461a4b7fa459df18d4bf2eaa7955899b3b03" kindref="member">_sgd</ref>)</defval>
        </param>
        <param>
          <type>float</type>
          <declname>mu</declname>
          <defval>0.f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>1.f</defval>
        </param>
        <param>
          <type>int</type>
          <declname>epochs_for_convergency</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>convergency_atol</declname>
          <defval>1e-2f</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
<para>Construct the object using the list of training parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The constructor follows the same nomenclature of the Python counterpart. This is the abstract type for the plasticity model.</para>
<para><simplesect kind="note"><para>Overriding this class you can specify the weights-update rule to use in the training.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of hidden units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batch_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the minibatch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>activation</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the activation function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optimizer</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classupdate__args" kindref="compound">update_args</ref> Optimizer object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean of the gaussian distribution that initializes the weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation of the gaussian distribution that initializes the weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epochs_for_convergency</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of stable epochs requested for the convergency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convergency_atol</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute tolerance requested for the convergency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator seed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="109" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a36aafa34a7d39721930afd46d2ccc5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BasePlasticity::BasePlasticity</definition>
        <argsstring>(const BasePlasticity &amp;b)</argsstring>
        <name>BasePlasticity</name>
        <param>
          <type>const <ref refid="classBasePlasticity" kindref="compound">BasePlasticity</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The copy constructor provides a deep copy of the object, i.e. all the arrays are copied and not moved.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBasePlasticity" kindref="compound">BasePlasticity</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="127" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a8fd48d4e055c774a6add951156790041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBasePlasticity" kindref="compound">BasePlasticity</ref> &amp;</type>
        <definition>BasePlasticity&amp; BasePlasticity::operator=</definition>
        <argsstring>(const BasePlasticity &amp;b)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classBasePlasticity" kindref="compound">BasePlasticity</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Copy operator. </para>
        </briefdescription>
        <detaileddescription>
<para>The operator performs a deep copy of the object and if there are buffers already allocated, the operatore deletes them and then re-allocates an appropriated portion of memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBasePlasticity" kindref="compound">BasePlasticity</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="139" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a4f812c1d906aa5e828bfcc65ce4e510a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BasePlasticity::~BasePlasticity</definition>
        <argsstring>()=default</argsstring>
        <name>~BasePlasticity</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Completely delete the object and release the memory of the arrays. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="149" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a1adfa1440172822a6e3280e0142fb80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::fit</definition>
        <argsstring>(float *X, const int &amp;n_samples, const int &amp;n_features, const int &amp;num_epochs)</argsstring>
        <name>fit</name>
        <param>
          <type>float *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n_samples</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n_features</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>num_epochs</declname>
        </param>
        <briefdescription>
<para>Train the model/encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>The model computes the weights and thus the encoded features using the given plasticity rule. The signature of the function is totally equivalent to the the Python counterpart except by the pointer arrays which require the dimension size as extra parameters.</para>
<para><simplesect kind="note"><para>This function must be called before the predict member-function. A check is performed internally to ensure it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>array in ravel format of the input variables/features </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_features</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of cols </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_epochs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of epochs for model convergency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="170" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a4104d12babea679995d21a5de08d7129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float* BasePlasticity::predict</definition>
        <argsstring>(const float *X, const int &amp;n_samples, const int &amp;n_features)</argsstring>
        <name>predict</name>
        <param>
          <type>const float *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n_samples</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n_features</declname>
        </param>
        <briefdescription>
<para>Train the model/encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>The model computes the weights and thus the encoded features using the given plasticity rule. The signature of the function is totally equivalent to the the Python counterpart except by the pointer arrays which require the dimension size as extra parameters.</para>
<para><simplesect kind="note"><para>This function must be called before the predict member-function. A check is performed internally to ensure it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>array in ravel format of the input variables/features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_features</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of cols.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The array of encoded features. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="190" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1ad5bfcab20dd11a25024d8fb83c0e4c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::save_weights</definition>
        <argsstring>(const std ::string &amp;filename)</argsstring>
        <name>save_weights</name>
        <param>
          <type>const std ::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Save the current weight matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The weights matrix is saved in binary format. The first value of the file is an integer corresponding to the number of weights (rows x cols) of the weight matrix, followed by the (float) weight matrix in ravel format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename or path where the file is saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="203" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a05b0d33b49372359fb6c96e80013ee78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::load_weights</definition>
        <argsstring>(const std ::string &amp;filename)</argsstring>
        <name>load_weights</name>
        <param>
          <type>const std ::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Load the current weight matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The weights matrix is loaded according to the format specified in the save_weights function, i.e. the first first value of the file is an integer corresponding to the number of weights (rows x cols) of the weight matrix, followed by the (float) weight matrix in ravel format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename or path of the weight. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="216" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a35be8a52e26ce61050f1408d2f69fa66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float* BasePlasticity::get_weights</definition>
        <argsstring>()</argsstring>
        <name>get_weights</name>
        <briefdescription>
<para>Get the weight matrix as pointer array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is just an utility for the Cython wrap of the object.</para>
<para><simplesect kind="return"><para>The weights matrix in ravel format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="226" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBasePlasticity_1a3ceca70b3099d2a4beebf28f6a48a1c2" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BasePlasticity::weights_update</definition>
        <argsstring>(float *X, const int &amp;n_features, float *weights_update)=0</argsstring>
        <name>weights_update</name>
        <reimplementedby refid="classBCM_1aa13af88336fddb68d60c7a007c63879a">weights_update</reimplementedby>
        <reimplementedby refid="classHopfield_1a907e8a6ba983b9a5e42e53228fb90b24">weights_update</reimplementedby>
        <param>
          <type>float *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n_features</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>weights_update</declname>
        </param>
        <briefdescription>
<para>Weights update rule. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Compute the weights update using the given learning rule.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>array in ravel format of the input variables/features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_features</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of cols. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Array/matrix of updates for weights. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="240" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a0a98532ea9e9b5d125cb127aa08143c7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::check_dims</definition>
        <argsstring>(const int &amp;n_features)</argsstring>
        <name>check_dims</name>
        <param>
          <type>const int &amp;</type>
          <declname>n_features</declname>
        </param>
        <briefdescription>
<para>Check the input dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The function checks if the given dimensions are consistent with the input ones.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_features</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of cols </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="250" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a91d7baac000c8ab71aa526c919ca393c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::check_is_fitted</definition>
        <argsstring>()</argsstring>
        <name>check_is_fitted</name>
        <briefdescription>
<para>Check if the model is already fitted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The function checks if function fit has been already called before the prediction. The check is performed on the value of the output array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="259" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a5c55267feabcfa7b1b8353ec00d83ce7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::check_params</definition>
        <argsstring>()</argsstring>
        <name>check_params</name>
        <briefdescription>
<para>Check the given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The function checks if the input variable epochs_for_convergency is positive defined and greater than 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="267" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1af6b1dd223ec430e273cfad5e169f93eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BasePlasticity::check_convergency</definition>
        <argsstring>()</argsstring>
        <name>check_convergency</name>
        <briefdescription>
<para>Check if the model training has reached the convergency. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The convergency is estimated by the stability or not of the learning parameter in a fixed (epochs_for_convergency) number of epochs for all the outputs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="277" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1a5f9be9c944b9840a9372fd09b9b034a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void BasePlasticity::normalize_weights</definition>
        <argsstring>()</argsstring>
        <name>normalize_weights</name>
        <reimplementedby refid="classHopfield_1a835ba0a410402cccd5cdc062b60e02d9">normalize_weights</reimplementedby>
        <briefdescription>
<para>Normalize the weights according to the given function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function must be overrided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="285" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1aceecfca1b48f9d7e37ae865b41c4ef52" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::_fit</definition>
        <argsstring>(float *X, const int &amp;num_epochs, const int &amp;n_features, const int &amp;n_samples)</argsstring>
        <name>_fit</name>
        <param>
          <type>float *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>num_epochs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n_features</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n_samples</declname>
        </param>
        <briefdescription>
<para>Core function of the fit formula. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>array in ravel format of the input variables/features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_epochs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of epochs for model convergency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_features</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the X matrix, i.e. the number of cols </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="298" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classBasePlasticity_1ac0b63f34c4066d1e59480ff7085697f7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BasePlasticity::_predict</definition>
        <argsstring>(const float *A, const float *B, float *C, const int &amp;N, const int &amp;M, const int &amp;K)</argsstring>
        <name>_predict</name>
        <param>
          <type>const float *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Core function of the predict formula. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The function computes the output as W @ X.T. We use the GEMM algorithm with OpenMP support for a fast evaluation</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (N x M) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (M x K) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Output matrix (N x K) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of cols/rows of A/B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>NUmber of cols of B </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="314" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract type representing an encoder model, i.e. a neural network ables to memorize all the input data giving in output an encoding array of features for each input data. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is the base class for specialized models. The derived classes have to implement an appropriated version of the private member function &quot;weights_update&quot;, i.e. the function responsibles for the update of the weights matrix. A second member which could be specialized is the &quot;normalize_weights&quot; private member which is responsible of the normalization of the weights matrix <bold>before</bold> the fit function. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BasePlasticity</label>
        <link refid="classBasePlasticity"/>
      </node>
      <node id="3">
        <label>Hopfield</label>
        <link refid="classHopfield"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BCM</label>
        <link refid="classBCM"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BasePlasticity</label>
        <link refid="classBasePlasticity"/>
        <childnode refid="2" relation="usage">
          <edgelabel>optimizer</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>update_args</label>
        <link refid="classupdate__args"/>
      </node>
    </collaborationgraph>
    <location file="/home/nico/Desktop/Code/plasticity/include/base.h" line="38" column="1" bodyfile="/home/nico/Desktop/Code/plasticity/include/base.h" bodystart="37" bodyend="316"/>
    <listofallmembers>
      <member refid="classBasePlasticity_1aceecfca1b48f9d7e37ae865b41c4ef52" prot="private" virt="non-virtual"><scope>BasePlasticity</scope><name>_fit</name></member>
      <member refid="classBasePlasticity_1ac0b63f34c4066d1e59480ff7085697f7" prot="private" virt="non-virtual"><scope>BasePlasticity</scope><name>_predict</name></member>
      <member refid="classBasePlasticity_1a6e55f0f7d052edaf0887db9ea54e550e" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>activation</name></member>
      <member refid="classBasePlasticity_1ab930aa85f4b5c42f2db8b18a1cba3a57" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>BasePlasticity</name></member>
      <member refid="classBasePlasticity_1ad24090d74bf2a00d7b94f17ad5a643f5" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>BasePlasticity</name></member>
      <member refid="classBasePlasticity_1a36aafa34a7d39721930afd46d2ccc5cd" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>BasePlasticity</name></member>
      <member refid="classBasePlasticity_1a4a6ecb6e802bdfc043346c41b2682ca1" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>batch</name></member>
      <member refid="classBasePlasticity_1af6b1dd223ec430e273cfad5e169f93eb" prot="private" virt="non-virtual"><scope>BasePlasticity</scope><name>check_convergency</name></member>
      <member refid="classBasePlasticity_1a0a98532ea9e9b5d125cb127aa08143c7" prot="private" virt="non-virtual"><scope>BasePlasticity</scope><name>check_dims</name></member>
      <member refid="classBasePlasticity_1a91d7baac000c8ab71aa526c919ca393c" prot="private" virt="non-virtual"><scope>BasePlasticity</scope><name>check_is_fitted</name></member>
      <member refid="classBasePlasticity_1a5c55267feabcfa7b1b8353ec00d83ce7" prot="private" virt="non-virtual"><scope>BasePlasticity</scope><name>check_params</name></member>
      <member refid="classBasePlasticity_1a2940d7e49ae8f8725ac552bfb0666e93" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>convergency_atol</name></member>
      <member refid="classBasePlasticity_1a9bc89cbc53982004dddd6c05a6f8c78b" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>engine</name></member>
      <member refid="classBasePlasticity_1a510a58d019657002b7b292072cd4a9e9" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>epochs_for_convergency</name></member>
      <member refid="classBasePlasticity_1a1adfa1440172822a6e3280e0142fb80e" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>fit</name></member>
      <member refid="classBasePlasticity_1a35be8a52e26ce61050f1408d2f69fa66" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>get_weights</name></member>
      <member refid="classBasePlasticity_1adf83370e29d977f79690bf17ed3668bf" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>gradient</name></member>
      <member refid="classBasePlasticity_1aa892a754bac8c9e6ab0268be5b070f4b" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>history</name></member>
      <member refid="classBasePlasticity_1a05b0d33b49372359fb6c96e80013ee78" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>load_weights</name></member>
      <member refid="classBasePlasticity_1a974bdeec773185818312b6c82f7a764b" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>mu</name></member>
      <member refid="classBasePlasticity_1a5f9be9c944b9840a9372fd09b9b034a2" prot="private" virt="virtual"><scope>BasePlasticity</scope><name>normalize_weights</name></member>
      <member refid="classBasePlasticity_1a6a98b64e6ab4ff78982b15e8f74ecb2f" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>nweights</name></member>
      <member refid="classBasePlasticity_1a8fd48d4e055c774a6add951156790041" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>operator=</name></member>
      <member refid="classBasePlasticity_1a5c440b00a49873031e5d0510f377f791" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>optimizer</name></member>
      <member refid="classBasePlasticity_1a427d9ff731f3db65bf5474e078b36467" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>output</name></member>
      <member refid="classBasePlasticity_1a6128541398550402261cf3eb1d6d1822" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>outputs</name></member>
      <member refid="classBasePlasticity_1ac3b0a942271707d1ac30cfb495fa91b6" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>precision</name></member>
      <member refid="classBasePlasticity_1a4104d12babea679995d21a5de08d7129" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>predict</name></member>
      <member refid="classBasePlasticity_1ad5bfcab20dd11a25024d8fb83c0e4c23" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>save_weights</name></member>
      <member refid="classBasePlasticity_1a45ee1f1803e06f09d9044e9252852631" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>sigma</name></member>
      <member refid="classBasePlasticity_1a1b218e7e7c6f5494aee2a8f8e603cbec" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>theta</name></member>
      <member refid="classBasePlasticity_1ac85dc18520a49febfcffd6646b0ab9b6" prot="protected" virt="non-virtual"><scope>BasePlasticity</scope><name>weights</name></member>
      <member refid="classBasePlasticity_1a3ceca70b3099d2a4beebf28f6a48a1c2" prot="private" virt="pure-virtual"><scope>BasePlasticity</scope><name>weights_update</name></member>
      <member refid="classBasePlasticity_1a4f812c1d906aa5e828bfcc65ce4e510a" prot="public" virt="non-virtual"><scope>BasePlasticity</scope><name>~BasePlasticity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
