<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classweights__initialization" kind="class" language="C++" prot="public">
    <compoundname>weights_initialization</compoundname>
    <includes refid="weights_8h" local="no">weights.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classweights__initialization_1afa82077e0c793ef32375527423627c6c" prot="private" static="no" mutable="no">
        <type>std ::mt19937</type>
        <definition>std :: mt19937 weights_initialization::engine</definition>
        <argsstring></argsstring>
        <name>engine</name>
        <briefdescription>
<para>Random number generator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="57" column="18" bodyfile="/home/nico/Desktop/C++Code/plasticity/include/weights.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classweights__initialization_1aa2fe590bc847af86c8d62be64749800b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int weights_initialization::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Initialization type to use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="59" column="7" bodyfile="/home/nico/Desktop/C++Code/plasticity/include/weights.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classweights__initialization_1af0e67beaa3fdef645d36ce2158cfe273" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float weights_initialization::mu</definition>
        <argsstring></argsstring>
        <name>mu</name>
        <briefdescription>
<para>mean of the weights distribution (used in normal distribution initializations) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="61" column="9" bodyfile="/home/nico/Desktop/C++Code/plasticity/include/weights.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classweights__initialization_1a22d1b05f5c257eccb4288548e08df743" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float weights_initialization::sigma</definition>
        <argsstring></argsstring>
        <name>sigma</name>
        <briefdescription>
<para>standard deviation of the weights distribution (used in normal distribution initialization) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="62" column="9" bodyfile="/home/nico/Desktop/C++Code/plasticity/include/weights.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classweights__initialization_1af8c28922b20dc355554eae3745c65e89" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float weights_initialization::scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <briefdescription>
<para>bound of the distribution domain (used in uniform distribution initialization) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="63" column="9" bodyfile="/home/nico/Desktop/C++Code/plasticity/include/weights.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classweights__initialization_1a4ba39cbfef1b727c454353697a23a72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>weights_initialization::weights_initialization</definition>
        <argsstring>()</argsstring>
        <name>weights_initialization</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="74" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1aff8148f7d7be02a2274a39c921b7d579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>weights_initialization::weights_initialization</definition>
        <argsstring>(const int &amp;type, float mu=0.f, float sigma=1.f, float scale=1.f, int seed=42)</argsstring>
        <name>weights_initialization</name>
        <param>
          <type>const int &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mu</declname>
          <defval>0.f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>1.f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <defval>1.f</defval>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
<para>Construct the object using the list of parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The constructor takes the parameters related to any initialization function but they will be used only if the selected algorithm requires them.</para>
<para><simplesect kind="note"><para>The type variable determines the desired initialization method.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization type to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean of the gaussian distribution that initializes the weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation of the gaussian distribution that initializes the weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the uniform distribution that initializes the weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator seed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="91" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1a94007a3897bbb531ce07a39dc6a20891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>weights_initialization::~weights_initialization</definition>
        <argsstring>()=default</argsstring>
        <name>~weights_initialization</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Completely delete the object and release the memory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="101" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1a55046e47c7d026cb9cbfb0c75cc912bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classweights__initialization" kindref="compound">weights_initialization</ref> &amp;</type>
        <definition>weights_initialization&amp; weights_initialization::operator=</definition>
        <argsstring>(const weights_initialization &amp;args)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classweights__initialization" kindref="compound">weights_initialization</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Copy operator. </para>
        </briefdescription>
        <detaileddescription>
<para>The operator performs a deep copy of the object and if there are buffers already allocated, the operatore deletes them and then re-allocates an appropriated portion of memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classweights__initialization" kindref="compound">weights_initialization</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="113" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1a4bc624cd32c8e75e27ff7f85b0d98bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>weights_initialization::weights_initialization</definition>
        <argsstring>(const weights_initialization &amp;args)</argsstring>
        <name>weights_initialization</name>
        <param>
          <type>const <ref refid="classweights__initialization" kindref="compound">weights_initialization</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The copy constructor provides a deep copy of the object, i.e. all the arrays are copied and not moved.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classweights__initialization" kindref="compound">weights_initialization</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="124" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1abe12e988f0d01cd299a51b0a2e472718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::init</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>init</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Init the member arrays using the given number of weights. </para>
        </briefdescription>
        <detaileddescription>
<para>This function init the member arrays used for the optimization steps.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="136" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classweights__initialization_1a578936880d81fe21e1bdff76f312a598" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::zeros</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>zeros</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Initialize weights with zero values. </para>
        </briefdescription>
        <detaileddescription>
<para>The initialization function follows the equation:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">w<sp/>=<sp/>np.zeros(shape=size,<sp/>dtype=float)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="153" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1a0b2c11efeb38d4dc2fdf03c243588110" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::ones</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>ones</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Initialize weights with one values. </para>
        </briefdescription>
        <detaileddescription>
<para>The initialization function follows the equation:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">w<sp/>=<sp/>np.ones(shape=size,<sp/>dtype=float)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="168" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1a92200aad6364c6301a817446d7feb948" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::uniform</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>uniform</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Sample initial weights from the uniform distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters are sampled from U(a, b). The initialization function follows the equation:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">w<sp/>=<sp/>np.random.uniform(low=-scale,<sp/>high=scale,<sp/>size=size)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="184" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1a51a379c8e7466ff87f258e84f1c3a7b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::normal</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>normal</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Sample initial weights from the Gaussian distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Initial weight parameters are sampled from N(mean, std). The initialization function follows the equation:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">w<sp/>=<sp/>np.random.normal(loc=mu,<sp/>scale=std,<sp/>size=size)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="200" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1afcae83388f4dfa14c9e9528a140a3f3a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::lecun_uniform</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>lecun_uniform</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>LeCun uniform initializer. </para>
        </briefdescription>
        <detaileddescription>
<para>It draws samples from a uniform distribution within [-limit, limit] where <computeroutput>limit</computeroutput> is <computeroutput>sqrt(3 / inputs)</computeroutput> where <computeroutput>inputs</computeroutput> is the number of input units in the weight matrix.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">w<sp/>=<sp/>uniform(w,<sp/>size,<sp/>std<sp/>::<sp/>sqrt(3.f<sp/>/<sp/>inputs))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="217" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1ae471e9333f5a5de67c90f7624b8cdabc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::glorot_uniform</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>glorot_uniform</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Glorot uniform initializer, also called Xavier uniform initializer. </para>
        </briefdescription>
        <detaileddescription>
<para>It draws samples from a uniform distribution within [-limit, limit] where <computeroutput>limit</computeroutput> is <computeroutput>sqrt(6 / (inputs + outputs))</computeroutput> and <computeroutput>inputs</computeroutput> is the number of input units in the weight matrix and <computeroutput>outputs</computeroutput> is the number of output units in the weight matrix.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">w<sp/>=<sp/>uniform(w,<sp/>size,<sp/>std<sp/>::<sp/>sqrt(6.f<sp/>/<sp/>(inputs<sp/>+<sp/>outputs))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="235" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1aa9fd852ad662a64c5aa87b3f8d156778" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::glorot_normal</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>glorot_normal</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>Glorot normal initializer, also called Xavier normal initializer. </para>
        </briefdescription>
        <detaileddescription>
<para>It draws samples from a truncated normal distribution centered on 0 with <computeroutput>stddev = sqrt(2 / (inputs + outputs))</computeroutput> and <computeroutput>inputs</computeroutput> is the number of input units in the weight matrix and <computeroutput>outputs</computeroutput> is the number of output units in the weight matrix.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">w<sp/>=<sp/>normal(w,<sp/>size,<sp/>0.f,<sp/>std<sp/>::<sp/>sqrt(2.f<sp/>/<sp/>(inputs<sp/>+<sp/>outputs))</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="253" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1a0b25d13fdfbeca0ace16ca447d90c816" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::he_uniform</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>he_uniform</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>He uniform variance scaling initializer. </para>
        </briefdescription>
        <detaileddescription>
<para>It draws samples from a uniform distribution within [-limit, limit] where <computeroutput>limit</computeroutput> is <computeroutput>sqrt(6 / inputs)</computeroutput> and <computeroutput>inputs</computeroutput> is the number of input units in the weight matrix.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">w<sp/>=<sp/>uniform(w,<sp/>size,<sp/>std<sp/>::<sp/>sqrt(6.f<sp/>/<sp/>inputs)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="270" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classweights__initialization_1af74b43fc796a59fb3696b59fc51731a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weights_initialization::he_normal</definition>
        <argsstring>(float *weights, const int &amp;inputs, const int &amp;outputs)</argsstring>
        <name>he_normal</name>
        <param>
          <type>float *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>outputs</declname>
        </param>
        <briefdescription>
<para>He normal initializer. </para>
        </briefdescription>
        <detaileddescription>
<para>It draws samples from a truncated normal distribution centered on 0 with <computeroutput>stddev = sqrt(2 / inputs)</computeroutput> and <computeroutput>inputs</computeroutput> is the number of input units in the weight matrix.</para>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">w<sp/>=<sp/>normal(w,<sp/>size,<sp/>0.f,<sp/>std<sp/>::<sp/>sqrt(2.f<sp/>/<sp/>inputs)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of weights in ravel format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of the weight matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns of the weight matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="287" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract type representing a weights initialization algorithm. The object implements different weights initialization algorithms, in particular: </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>Zeros</para>
</listitem><listitem><para>Ones</para>
</listitem><listitem><para>Uniform</para>
</listitem><listitem><para>Normal</para>
</listitem><listitem><para>Lecun Uniform</para>
</listitem><listitem><para>Glorot Uniform</para>
</listitem><listitem><para>Glorot Normal</para>
</listitem><listitem><para>He Uniform</para>
</listitem><listitem><para>He Normal</para>
</listitem></itemizedlist>
</para>
<para>The desired weights initialization algorithm can be set using the type variable in the constructor signature. The core functionality of the object is given by the &apos;init&apos; member function which applies the desired initialization algorithm using the member parameters. </para>
    </detaileddescription>
    <location file="/home/nico/Desktop/C++Code/plasticity/include/weights.h" line="54" column="1" bodyfile="/home/nico/Desktop/C++Code/plasticity/include/weights.h" bodystart="53" bodyend="289"/>
    <listofallmembers>
      <member refid="classweights__initialization_1afa82077e0c793ef32375527423627c6c" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>engine</name></member>
      <member refid="classweights__initialization_1aa9fd852ad662a64c5aa87b3f8d156778" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>glorot_normal</name></member>
      <member refid="classweights__initialization_1ae471e9333f5a5de67c90f7624b8cdabc" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>glorot_uniform</name></member>
      <member refid="classweights__initialization_1af74b43fc796a59fb3696b59fc51731a3" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>he_normal</name></member>
      <member refid="classweights__initialization_1a0b25d13fdfbeca0ace16ca447d90c816" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>he_uniform</name></member>
      <member refid="classweights__initialization_1abe12e988f0d01cd299a51b0a2e472718" prot="public" virt="non-virtual"><scope>weights_initialization</scope><name>init</name></member>
      <member refid="classweights__initialization_1afcae83388f4dfa14c9e9528a140a3f3a" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>lecun_uniform</name></member>
      <member refid="classweights__initialization_1af0e67beaa3fdef645d36ce2158cfe273" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>mu</name></member>
      <member refid="classweights__initialization_1a51a379c8e7466ff87f258e84f1c3a7b6" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>normal</name></member>
      <member refid="classweights__initialization_1a0b2c11efeb38d4dc2fdf03c243588110" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>ones</name></member>
      <member refid="classweights__initialization_1a55046e47c7d026cb9cbfb0c75cc912bd" prot="public" virt="non-virtual"><scope>weights_initialization</scope><name>operator=</name></member>
      <member refid="classweights__initialization_1af8c28922b20dc355554eae3745c65e89" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>scale</name></member>
      <member refid="classweights__initialization_1a22d1b05f5c257eccb4288548e08df743" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>sigma</name></member>
      <member refid="classweights__initialization_1aa2fe590bc847af86c8d62be64749800b" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>type</name></member>
      <member refid="classweights__initialization_1a92200aad6364c6301a817446d7feb948" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>uniform</name></member>
      <member refid="classweights__initialization_1a4ba39cbfef1b727c454353697a23a72a" prot="public" virt="non-virtual"><scope>weights_initialization</scope><name>weights_initialization</name></member>
      <member refid="classweights__initialization_1aff8148f7d7be02a2274a39c921b7d579" prot="public" virt="non-virtual"><scope>weights_initialization</scope><name>weights_initialization</name></member>
      <member refid="classweights__initialization_1a4bc624cd32c8e75e27ff7f85b0d98bd8" prot="public" virt="non-virtual"><scope>weights_initialization</scope><name>weights_initialization</name></member>
      <member refid="classweights__initialization_1a578936880d81fe21e1bdff76f312a598" prot="private" virt="non-virtual"><scope>weights_initialization</scope><name>zeros</name></member>
      <member refid="classweights__initialization_1a94007a3897bbb531ce07a39dc6a20891" prot="public" virt="non-virtual"><scope>weights_initialization</scope><name>~weights_initialization</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
