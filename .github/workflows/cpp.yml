name: plasticity C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:

    runs-on: ${{ matrix.cfg.os }}
    name: ${{ matrix.cfg.os }}@${{ matrix.cfg.cxx }}-${{ matrix.cfg.cpp-version }}

    strategy:
      matrix:
        cfg:
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.8} # WORKS
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.9} # WORKS
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 5.0} # WORKS
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 6.0} # WORKS
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 7.0} # WORKS
#
#          - {os: ubuntu-18.04, cc: gcc, cxx: g++, cpp-version: 7.0} # WORKS
#          - {os: ubuntu-18.04, cc: gcc, cxx: g++, cpp-version: 8.0} # WORKS
#          - {os: ubuntu-18.04, cc: gcc, cxx: g++, cpp-version: 9.0} # WORKS
#
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.8} # WORKS
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 4.9} # WORKS
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 5.0} # WORKS
#          - {os: ubuntu-16.04, cc: gcc, cxx: g++, cpp-version: 6.0} # WORKS
#          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 7.0} # WORKS
#          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 8.0} # WORKS
#          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 9.0} # WORKS
#          - {os: ubuntu-20.04, cc: gcc, cxx: g++, cpp-version: 10} # WORKS


          #- {os: ubuntu-16.04, cc: clang, cxx: clang, cpp-version: 3.6}
          #- {os: ubuntu-16.04, cc: clang, cxx: clang, cpp-version: 3.8}
          #- {os: ubuntu-18.04, cc: clang, cxx: clang, cpp-version: 3.9}
          #- {os: ubuntu-18.04, cc: clang, cxx: clang, cpp-version: 4.0}
          #- {os: ubuntu-18.04, cc: clang, cxx: clang, cpp-version: 5.0}
          #- {os: ubuntu-18.04, cc: clang, cxx: clang, cpp-version: 6.0}
#          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 7} # WORKS
#          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 8} # WORKS
#          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 9} # WORKS
#          - {os: ubuntu-20.04, cc: clang, cxx: clang++, cpp-version: 10} # WORKS


#          - {os: windows-latest, cc: cl, cxx: cl, cpp-version: latest}
#          - {os: windows-latest, cc: clang-cl, cxx: clang-cl, cpp-version: latest}
#          - {os: windows-latest, cc: gcc, cxx: g++, cpp-version: latest}

          - {os: macOS-10.15, cc: gcc, cxx: g++, cpp-version: 9}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 11.2.1}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 11.3.1}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 11.4.1}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 11.5}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 11.6}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 11.7}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 12.0.1}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 12.1}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 12.1.1}
          - {os: macOS-10.15, cc: clang, cxx: clang++, cpp-version: 12.2}

    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        submodules: recursive

    - name: Setting env variables
      run: |
        echo "WORKSPACE=${{ github.workspace }}/.." >> $GITHUB_ENV
        echo "VCPKG_ROOT=$env:WORKSPACE/vcpkg" >> $GITHUB_ENV
        echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV

    - name: Get latest CMake and Ninja
      # Using 'latest' branch, the latest CMake and ninja are installed.
      uses: lukka/get-cmake@latest

    - name: Install (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ${{ matrix.cfg.cxx }}-${{ matrix.cfg.cpp-version }}

        if [[ "${{ matrix.cfg.cxx }}" == "clang" ]]; then
          sudo apt-get install -y lld-${{ matrix.cfg.cpp-version }} libc++-${{ matrix.cfg.cpp-version }}-dev libc++abi-${{ matrix.cfg.cpp-version }}-dev clang-tools-${{ matrix.cfg.cpp-version }}
        fi

        echo "CC=${{ matrix.cfg.cc }}-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cfg.cxx }}-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV

        # Install the Eigen Library
        sudo apt-get install -y libeigen3-dev

    - name: Install (macOS)
      if: runner.os == 'macOS'
      run: |
        curl -LO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci; source ./macports-ci install

        if [ "${{ matrix.cfg.cc }}" = "gcc" ]; then
          brew install gcc@${{ matrix.cfg.cpp-version }}
          echo "CC=gcc-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        else
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.cfg.cpp-version }}.app
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi


        brew install llvm${{ matrix.cfg.cpp-version }}

        echo "CC=${{ matrix.cfg.cc }}-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cfg.cxx }}-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV

        # Install the Eigen Library
        brew install eigen

    - name: Install (Windows)
      if: runner.os == 'Windows'
      run: |

        # Install vcpkg
        cd $env:WORKSPACE
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        git checkout --force 2020.01
        .\bootstrap-vcpkg.bat

        # Install the Eigen Library
        .\vcpkg.exe install eigen3:$env:VCPKG_DEFAULT_TRIPLET

    - name: 'Configure build (Windows)'
      if: runner.os == 'Windows'
      run: |
        cd ${{ github.workspace }}
        mkdir buildDirectory_debug
        cd buildDirectory_debug
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE="Debug" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET" -DBUILD_DOCS=OFF -DBUILD_TEST=ON -DOMP=ON -DPYWRAP=OFF
        cd ..
        mkdir buildDirectory_release
        cd buildDirectory_release
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET" -DBUILD_DOCS=OFF -DBUILD_TEST=ON -DOMP=ON -DPYWRAP=OFF
        cd ..

    - name: 'Configure build (Unix)'
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        cd ${{ github.workspace }}
        mkdir buildDirectory_debug
        cd buildDirectory_debug
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE="Debug" -DBUILD_DOCS=OFF -DBUILD_TEST=ON -DOMP=OFF -DPYWRAP=OFF
        cd ..
        mkdir buildDirectory_release
        cd buildDirectory_release
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE="Release" -DBUILD_DOCS=OFF -DBUILD_TEST=ON -DOMP=OFF -DPYWRAP=OFF
        cd ..

    - name: 'Build'
      run: |
        cd ${{ github.workspace }}
        cd buildDirectory_debug
        cmake --build . --target install -- -j8
        cd ..
        cd buildDirectory_release
        cmake --build . --target install -- -j8
        cd ..
