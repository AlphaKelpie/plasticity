name: plasticity C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:

    runs-on: ${{ matrix.cfg.os }}
    name: ${{ matrix.cfg.os }}@${{ matrix.cfg.cpp-compiler }}-${{ matrix.cfg.cpp-version }}

    strategy:
      matrix:
        cfg:
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 4.8}
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 4.9}
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 5.0}
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 6.0}
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 7.0}

          - {os: ubuntu-18.04, cpp-compiler: gcc, cpp-version: 7.0}
          - {os: ubuntu-18.04, cpp-compiler: gcc, cpp-version: 8.0}
          - {os: ubuntu-18.04, cpp-compiler: gcc, cpp-version: 9.0}

          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 4.8}
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 4.9}
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 5.0}
          - {os: ubuntu-16.04, cpp-compiler: gcc, cpp-version: 6.0}
          - {os: ubuntu-20.04, cpp-compiler: gcc, cpp-version: 7.0}
          - {os: ubuntu-20.04, cpp-compiler: gcc, cpp-version: 8.0}
          - {os: ubuntu-20.04, cpp-compiler: gcc, cpp-version: 9.0}
          - {os: ubuntu-20.04, cpp-compiler: gcc, cpp-version: 10}


#          - {os: ubuntu-16.04, cpp-compiler: clang, cpp-version: 3.6}
#          - {os: ubuntu-16.04, cpp-compiler: clang, cpp-version: 3.8}
#          - {os: ubuntu-16.04, cpp-compiler: clang, cpp-version: 3.9}
#          - {os: ubuntu-16.04, cpp-compiler: clang, cpp-version: 4.0}
#          - {os: ubuntu-16.04, cpp-compiler: clang, cpp-version: 5.0}
#          - {os: ubuntu-16.04, cpp-compiler: clang, cpp-version: 6.0}
#          - {os: ubuntu-18.04, cpp-compiler: clang, cpp-version: 7.0}


          - {os: windows-latest, cpp-compiler: cl, cpp-version: latest}
#          - {os: windows-latest, cpp-compiler: clang-cl, cpp-version: latest}
#          - {os: windows-latest, cpp-compiler: gcc, cpp-version: latest}

#          - {os: macos-latest, cpp-compiler: gcc, cpp-version: 7.0}
#          - {os: macos-latest, cpp-compiler: clang, cpp-version: 7.0}


          - {os: ubuntu-20.04, cpp-compiler: gcc, cpp-version: 9.0}
          - {os: ubuntu-20.04, cpp-compiler: gcc, cpp-version: 9.0}
          - {os: ubuntu-20.04, cpp-compiler: gcc, cpp-version: 9.0}

    steps:
    - uses: actions/checkout@v1

    - name: Setting env variables
      run: |
        echo "WORKSPACE=$HOME" >> $GITHUB_ENV
        echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
        echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV

    - name: Install (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ${{ matrix.cfg.cpp-compiler }}-${{ matrix.cfg.cpp-version }}

        echo "CC=${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV

        if [ "${{ matrix.cfg.cpp-compiler }}" = "gcc" ]; then
          echo "CXX=g++-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        else
          echo "CXX=clang++-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        fi

        sudo apt-get install -y --no-install-recommends ninja-build
        sudo apt install -y cmake
        sudo apt install -y libeigen3-dev

    - name: Install (macOS)
      if: runner.os == 'macOS'
      run: |
        brew reinstall ${{ matrix.cfg.cpp-compiler }}@${{ matrix.cfg.cpp-version }}

        if [ "${{ matrix.cfg.cpp-compiler }}" = "gcc" ]; then
          echo "CXX=g++-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        else
          echo "CXX=clang++-${{ matrix.cfg.cpp-version }}" >> $GITHUB_ENV
        fi

        brew install ninja
        brew install cmake
        brew install eigen

    - name: Install (Windows)
      if: runner.os == 'Windows'
      run: |
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        scoop install ninja llvm --global

        if ("${{ matrix.cfg.cpp-compiler }}" -eq "gcc") {
          echo CC=gcc | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
          echo CXX=g++ | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
        } elseif ("${{ matrix.cfg.cpp-compiler }}" -eq "clang") {
          echo CC=clang | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
          echo CXX=clang++ | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
        } else {
          echo CC=${{ matrix.cfg.cpp-compiler }} | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
          echo CXX=${{ matrix.cfg.cpp-compiler }} | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
        }

        # We add the output directories to the PATH to make sure the tests and
        # examples can find the reproc and reproc++ DLL's.
        $env:PATH += ";$pwd\build\reproc\lib"
        $env:PATH += ";$pwd\build\reproc++\lib"

        # Make all PATH additions made by scoop and ourselves global.
        echo "PATH=$env:PATH" | Add-Content -Path $env:GITHUB_ENV -Encoding utf8

        if ("${{ matrix.cfg.cpp-compiler }}".endswith("cl")) {
          & .github\workflows\vsenv.ps1 -arch x64 -hostArch x64
        }

        # Install vcpkg
        cd $env:WORKSPACE
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        git checkout --force 2020.01
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe install eigen3:$env:VCPKG_DEFAULT_TRIPLET
        cd -

    - name: 'Configure build'
      run: |
        mkdir buildDirectory_debug
        cd buildDirectory_debug
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE="Debug" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET" -DOMP=OFF -DPYWRAP=OFF
        cd ..
        mkdir buildDirectory_release
        cd buildDirectory_release
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="$env:VCPKG_DEFAULT_TRIPLET" -DOMP=OFF -DPYWRAP=OFF
        cd ..

    - name: 'Build'
      run: |
        cd buildDirectory_debug
        cmake --build . --target install -- -j8
        cd ..
        cd buildDirectory_release
        cmake --build . --target install -- -j8
        cd ..
